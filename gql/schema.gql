type Person {
  id: String!
  givenName: String!
  surname: String!
  born: Int
  phone: String
  email: String
  address: String
  affiliations: [Affiliation]
  relations: [Relation]
}

type Affiliation {
  id: String!
  organization: Organization!
  role: Role
  since: Int
}

type Organization {
  id: String!
  name: String!
  address: String
  parent: Organization
}

type Role {
  id: String!
  name: String!
  description: String
}

type Relation {
  id: String!
  kind: String!
  p1: Person!
  p2: Person!
  since: Int
  notes: String
}

type Query {
  allPersons: [Person!]!
  personById(id: String!): Person
  personBySurname(surname: String!): Person
  personsByRelation(relationQueryArg: [RelationQueryArg]!): [Person]
  allOrganizations: [Organization!]!
}

input RelationQueryArg {
  id: String
  kind: String
  p1Id: String
  p2Id: String
  since: Int
}

input RelationInput {
  id: String!
  kind: String!
  p1Id: String!
  p2Id: String!
  since: Int
}

input PersonInput {
  id: String!
  givenName: String!
  surname: String!
  born: Int
  phone: String
  email: String
  address: String
  affiliations: [AffiliationInput]
  relations: [RelationInput]
}

input AffiliationInput {
    id: String!
    organizationId: String!
    roleId: String
    since: Int
}

type Mutation {
    createPersons(personsInput: [PersonInput]!): String
}
